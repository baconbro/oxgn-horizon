name: Horizon CI # Name of your GitHub Actions Workflow

# Controls when the workflow will run
on:
  push:
    branches: [ main ] # Triggers the workflow on push events to the 'main' branch
  pull_request:
    branches: [ main ] # Triggers the workflow on pull request events targeting the 'main' branch
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  build-and-lint: # You can name your job (e.g., build-and-test, lint-build, etc.)
    name: Build, Lint & Check # A more descriptive name for the job shown in GitHub UI
    runs-on: ubuntu-latest # Specifies the runner environment (latest Ubuntu)

    strategy:
      matrix:
        # Run the job for these Node.js versions to ensure compatibility
        node-version: [18.x, 20.x] 
        # Node.js 20.x is the current LTS as of May 2025. 18.x is the previous LTS.

    steps:
      # Step 1: Check out your repository code
      - name: Checkout repository
        uses: actions/checkout@v4 # GitHub Action to checkout your code

      # Step 2: Set up Node.js environment
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm' # Caches npm dependencies for faster subsequent runs

      # Step 3: Install dependencies
      # Using 'npm ci' is generally recommended for CI as it installs based on package-lock.json
      # and is usually faster and more reliable for clean installs.
      - name: Install dependencies
        run: npm ci

      # Step 4: Generate Prisma Client
      # This step is crucial if your schema changes, as it generates the TypeScript types for Prisma Client.
      # It typically doesn't require an actual database connection just to generate the client.
      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          # DATABASE_URL is often required by Prisma CLI, even if 'generate' doesn't connect.
          # A dummy URL can suffice if no actual DB connection is needed for this step.
          # If your Prisma setup strictly requires a valid DB for 'generate' (uncommon), 
          # you might need to use a GitHub secret with a test DB URL.
          DATABASE_URL: "postgresql://ci_user:ci_password@localhost:5432/ci_db?schema=public"

      # Step 5: Run Linter
      # Replace 'npm run lint' with your actual linting command if different.
      - name: Run Linter
        run: npm run lint

      # Step 6: Build the Next.js project
      # This command compiles your Next.js application for production.
      - name: Build project
        run: npm run build

      # Step 7: Run Tests (Placeholder)
      # Add this step once you have tests in your project.
      # - name: Run Tests
      #   run: npm test # Or your specific test command